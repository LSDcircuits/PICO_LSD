.program pulse
.side_set 2 opt

; The PIO waits for the CPU to provide a pulse count
.wrap_target
    pull block               ; block until CPU writes a word to TX FIFO
    mov x, osr               ; copy & count into scratch register X

loop:
    nop      side 0b01 [1]    ; first half of pulse PIN (0,1)
    nop      side 0b10 [1]    ; second half of pulse PIN (1,0) 
    jmp x--, loop             ; jump back to where loop started 
                              ; After finishing all pulses, notify CPU
    mov isr, null             ; clear ISR (just to be safe)
    set pindirs, 0            ; optionally release the pins (if needed)
    push block                ; push ISR (0) to RX FIFO as completion flag 
.wrap 

% c-sdk {
void pulse_program_init(PIO pio, uint sm, uint offset, uint pin_base, float clkdiv) {
    pio_gpio_init(pio, pin_base);
    pio_gpio_init(pio, pin_base + 1);
    pio_sm_set_consecutive_pindirs(pio, sm, pin_base, 2, true);
    pio_sm_config c = pulse_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin_base);
    sm_config_set_clkdiv(&c, clkdiv);
    pio_sm_init(pio, sm, offset, &c);
}
%}
